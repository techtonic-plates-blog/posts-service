//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::PostsStatusEnum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, poem_openapi :: Object,
)]
#[sea_orm(table_name = "posts")]
#[oai(rename = "Posts")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub slug: String,
    pub title: String,
    pub creation_time: DateTime,
    pub body: String,
    pub author: String,
    pub created_by: Uuid,
    pub subheading: String,
    pub last_edit: Option<DateTime>,
    pub post_status: PostsStatusEnum,
    #[sea_orm(column_type = "custom(\"tsvector\")")]
    #[oai(skip)]
    #[serde(skip)]
    #[sea_orm(ignore)]
    pub title_search: String,
    #[sea_orm(column_type = "custom(\"tsvector\")")]
    #[oai(skip)]
    #[serde(skip)]
    #[sea_orm(ignore)]
    pub author_search: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::CreatedBy",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::users::Entity")]
    Users,
}